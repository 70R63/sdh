apply plugin: 'installer-platform-plugin'
apply plugin: 'installer-addon2-plugin'

def pl = platform {
	localProperties {
		property 'storefront.show.debug.info', 'false'
		property 'datahub.extension.exportURL', 'http://localhost:9001/datahubadapter'
		property 'datahub.extension.userName', 'admin'
		property 'datahub.extension.password', 'nimda'
		property 'datahub.server.url', 'http://localhost:8080/datahub-webapp/v1'
		property 'datahubadapter.datahuboutbound.url', 'http://localhost:8080/datahub-webapp/v1'
		property 'registration.consent.id.publicsector', 'MARKETING_NEWSLETTER'
		property 'impex.generation.supported.locales', 'de,en,fr,es'
		property 'publicsector.application.domain.whitelist', 'publicsector.local'
		property 'publicsectorservices.encoder.algorithm', 'AES'
		property 'publicsectorservices.encoder.aes.key', 'd2cb415e067c7b13'
		property 'publicsectorservices.encoder.encryption.cipher', 'AES/CBC/PKCS5Padding'
		property 'publicsectorservices.encoder.initialization.vector', 'e36dc751d0433f05'
		property 'promotions.legacy.mode', 'true'
		property 'default.password.encoding', 'pbkdf2'
	}

	afterSetup {
		ensureAdminPasswordSet()
	}

	extensions {

		/*SDH Custom Extension*/
			"sdhcore",
			"sdhfacades",
			"sdhstorefront",
			"sdhinitialdata",
			"sdhtest",
			"sdhcockpits",
		/* publicsector extensions */
		extName 'publicsectoracceleratoraddon'
		extName 'publicsectorbackoffice'
		extName 'publicsectorconsignmentexchange'
		extName 'publicsectordocmanagement'
		extName 'publicsectordocmanagementexchange'
		extName 'publicsectorfacades'
		extName 'publicsectorfulfilment'
		extName 'publicsectorocc'
		extName 'publicsectorservices'
		extName 'publicsectorstore'
		extName 'xyformscommercebackoffice'
		extName 'xyformscommerceservices'
		extName 'xyformscommercefacades'

		/* bill extensions */
		extName 'billaddon'
		extName 'billbackoffice'
		extName 'billexchange'
		extName 'billfacades'
		extName 'billservices'

		/* relationship extensions */
		extName 'relationshipaddon'
		extName 'relationshipbackoffice'
		extName 'relationshipexchange'
		extName 'relationshipfacades'
		extName 'relationshipservices'

		extName 'commerceservicesbackoffice'
		extName 'solrfacetsearchbackoffice'
		extName 'solrserver'
		extName 'yacceleratorinitialdata'
		extName 'yacceleratorstorefront'
		extName 'commercewebservices'

		extName 'acceleratorocc'

		extName 'assistedservicestorefront'
		extName 'cmswebservices'
		extName 'smarteditwebservices'
		extName 'cmssmarteditwebservices'
		extName 'permissionswebservices'
		extName 'smarteditaddon'
		extName 'cmssmartedit'
		extName 'cmsbackoffice'
		extName 'cmsocc'
		extName 'xyformsbackoffice'
		extName 'xyformsstorefrontcommons'
		extName 'xyformsweb'
		extName 'orbeonweb'
		extName 'auditreportservices'
		extName 'backoffice'

		extName 'configurablebundlefacades'
		extName 'configurablebundleservices'
		extName 'configurablebundlebackoffice'
		extName 'customersupportbackoffice'
		extName 'datahubadapter'
		extName 'datahubbackoffice'
		extName 'datahubclient'
		extName 'previewwebservices'
		extName 'pcmbackoffice'
		extName 'backofficesolrsearch'

	}

	addons {

		forStoreFronts('yacceleratorstorefront') {
			names 'xyformsstorefrontcommons','relationshipaddon','billaddon','publicsectoracceleratoraddon', 'smarteditaddon','assistedservicestorefront'
			template 'yacceleratorstorefront'
		}

	}
}

task setup {
	doLast {
		pl.setup()
	}
}

task buildSystem(dependsOn: setup) {
	doLast {
		pl.build()
	}
}

task initialize(dependsOn: buildSystem) {
	doLast {
		pl.initialize()
	}
}

task start {
	doLast {
		pl.start()
	}
}

task startInBackground {
	doLast {
		pl.startInBackground()
	}
}

task stopInBackground {
	doLast {
		pl.stopInBackground()
	}
}
